Classes
	HamNode
		Initializes the node
		Takes messages from a client app
	TopoParser
		Parses the topology file
		Provides info about nodes that aren't neighbors
	Connection
		Wraps around a live zmq/tcp connection
		Launches it's own thread for receiving messages
	HealthSystem
		Methods for checking neighbor's health
		Passes health information
On start-up
	Who am I?
	Parse a topology file
	Build a neighborhood list
		Create connections for all the neighbors
	Check in with neighbors
		Gossip about system state
On message receipt from an application
	Pack message data
	Checksum and append to trailer
	Add header
	Checksum the header
		Standard size
		Length of payload
	Send the message
		Check if node is a neighbor
			If so send via open connection
		If not neighbor
			Check state
			Get address from topology parser
			Open a connection to it
So quick demo for results
	Point to point comms from an external application
		App -> ham library -> ham library -> App
		Measure latency and throughput
	Features
		Should do address translation from node name to ip and port
		should packetize data and add checksums to payload and header of message
		Should periodically check status of other node by querying health information
	One push pull socket
		How to do backwards comms?
			Have the application design the comms infrastructure
			HAM justs wraps around the zmq calls to add translation and FT methods
	Implementation procedure
		Write the app skeleton
		: Rip out Nick's tcp/ip code and use that for basic comms
		Replace tcp/ip with zmq
		Get numbers for both
		Add FT methods
		Get numbers
		Make slides
